<?php

function cbc_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  //die("rewriting a sql query");
}

/**
  *Implementation of hook_form_alter
  */

function cbc_form_alter(&$form, $form_state, $form_id){
  if ($form_id == 'apachesolr_search_custom_page_search_form' && $form['#id'] == 'search-form') {
    $form['basic']['keys']['#size'] = '60';
    $form['basic']['keys']['#title'] = '';
      $form['#prefix'] = '<div class="Block">
	    <div class="Block-tl"></div>
	    <div class="Block-tr"><div></div></div>
	    <div class="Block-bl"><div></div></div>
	    <div class="Block-br"><div></div></div>
	    <div class="Block-tc"><div></div></div>
	    <div class="Block-bc"><div></div></div>
	    <div class="Block-cl"><div></div></div>
	    <div class="Block-cr"><div></div></div>
	    <div class="Block-cc"></div>
	    <div class="Block-body">';
      $form['#suffix'] = '</div></div>';
  }

  if($form_id == 'search_form' && arg(1) == 'cbc'){
    //date range box
    $years = drupal_map_assoc(range(1990, date('Y')));
    $months = drupal_map_assoc(range(1,12));
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Options'),
      '#collapsible' => TRUE,
    );
    $form['advanced']['publication_month'] = array(
      '#type' => 'select',
      '#title' => t('Month'),
      '#options' => $months,
    );
    $form['advanced']['publication_year'] = array(
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => $years,
    );
    $form['#validate'][] = 'cbc_powersearch_validate';

  }

  if ($form_id == 'webform_client_form_349' && !(arg(0) == 'node' && arg(1) == 349)) {
    $form['submitted']['title']['#access'] = FALSE;
    $form['submitted']['phone']['#access'] = FALSE;
    foreach (element_children($form['submitted']) as $key) {
      $form['submitted'][$key]['#attributes']['title'] = $form['submitted'][$key]['#title'];
    }

    // Add new item to selecbox and make it not multiselect.
    array_unshift($form['submitted']['topic']['#options'], t('- Topic -'));
    $form['submitted']['topic']['#multiple'] = FALSE;
    $form['submitted']['topic']['#size'] = 1;
    $form['submitted']['topic']['#suffix'] = l('Select multiple topics', 'node/349');
  }
}


function cbc_powersearch_validate($form_id, &$form_state) {
  // Initialise using any existing basic search keywords.
  $keys = $form_state['values']['processed_keys'];

  // Insert extra restrictions into the search keywords string.
  if (isset($form_state['values']['type']) && is_array($form_state['values']['type'])) {
    // Retrieve selected types - Forms API sets the value of unselected checkboxes to 0.
    $form_state['values']['type'] = array_filter($form_state['values']['type']);
    if (count($form_state['values']['type'])) {
      $keys = search_query_insert($keys, 'type', implode(',', array_keys($form_state['values']['type'])));
    }
  }

  if (isset($form_state['values']['publication_year'])) {
    $keys = search_query_insert($keys, 'publication_year', $form_state['values']['publication_year']);
  }
  if (!empty($keys)) {
    $form_state['basic']['inline']['processed_keys'] = trim($keys);
    form_set_value($form['basic']['inline']['processed_keys'], trim($keys), $form_state);
    $form_state['values']['keys'] = $keys;
  }
}

/**
 * Implementation of hook_search().
 */
function cbc_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      return t('Power Search');

    case 'reset':
      db_query("UPDATE {search_dataset} SET reindex = %d WHERE type = 'node'", time());
      return;

    case 'status':
      $total = db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1'));
      $remaining = db_result(db_query("SELECT COUNT(*) FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE n.status = 1 AND (d.sid IS NULL OR d.reindex <> 0)"));
      return array('remaining' => $remaining, 'total' => $total);

    case 'admin':
      $form = array();
      return $form;

    case 'search':
      // Build matching conditions
      list($join1, $where1) = _db_rewrite_sql();
      $arguments1 = array();
      $conditions1 = 'n.status = 1';

      /**
       * POWER SEARCH MODIFICATIONS
       */

      if($publication_year = search_query_extract($keys, 'publication_year')) {
          $dateranges[] = "DATE_FORMAT(cbc_pub.field_cbc_publish_date_value, %Y) = %d";
          $arguments1[] = $publication_year;
          $conditions1 .= ' AND ('. implode(' OR ', $dateranges) .')';
          $join1 .= ' INNER JOIN {content_field_cbc_publish_date} cbc_pub ON n.nid = cbc_pub.nid';
          $keys = search_query_insert($keys, 'publication_year');
      }
      $dateranges = array();
      if($publication_month = search_query_extract($keys, 'publication_month')) {
          $dateranges[] = "DATE_FORMAT(cbc_pub.field_cbc_publish_date_value, %c) = %d";
          $arguments1[] = $publication_month;
          $conditions1 .= ' AND ('. implode(' OR ', $dateranges) .')';
          $keys = search_query_insert($keys, 'publication_month');
      }
      if($publication_month || $publication_year) {
        $join1 .= ' INNER JOIN {content_field_cbc_publish_date} cbc_pub ON n.nid = cbc_pub.nid';
      }

      if ($type = search_query_extract($keys, 'type')) {
        $types = array();
        foreach (explode(',', $type) as $t) {
          $types[] = "n.type = '%s'";
          $arguments1[] = $t;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $types) .')';
        $keys = search_query_insert($keys, 'type');
      }


      // Build ranking expression (we try to map each parameter to a
      // uniform distribution in the range 0..1).
      $ranking = array();
      $arguments2 = array();
      $join2 = '';
      // Used to avoid joining on node_comment_statistics twice
      $stats_join = FALSE;
      $total = 0;
      if ($weight = (int)variable_get('node_rank_relevance', 5)) {
        // Average relevance values hover around 0.15
        $ranking[] = '%d * i.relevance';
        $arguments2[] = $weight;
        $total += $weight;
      }
      if ($weight = (int)variable_get('node_rank_recent', 5)) {
        // Exponential decay with half-life of 6 months, starting at last indexed node
        $ranking[] = '%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)';
        $arguments2[] = $weight;
        $arguments2[] = (int)variable_get('node_cron_last', 0);
        $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        $stats_join = TRUE;
        $total += $weight;
      }
      if (module_exists('comment') && $weight = (int)variable_get('node_rank_comments', 5)) {
        // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_comments_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        if (!$stats_join) {
          $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        }
        $total += $weight;
      }
      if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) &&
          $weight = (int)variable_get('node_rank_views', 5)) {
        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_views_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';
        $total += $weight;
      }

      // When all search factors are disabled (ie they have a weight of zero),
      // the default score is based only on keyword relevance and there is no need to
      // adjust the score of each item.
      if ($total == 0) {
        $select2 = 'i.relevance AS score';
        $total = 1;
      }
      else {
        $select2 = implode(' + ', $ranking) . ' AS score';
      }

      // Do search.
      $find = do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2);

      // Load results.
      $results = array();
      foreach ($find as $item) {
        // Build the node body.
        $node = node_load($item->sid);
        $node->build_mode = NODE_BUILD_SEARCH_RESULT;
        $node = node_build_content($node, FALSE, FALSE);
        $node->body = drupal_render($node->content);

        // Fetch comments for snippet.
        $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');
        // Fetch terms for snippet.
        $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');

        $extra = node_invoke_nodeapi($node, 'search result');
        $results[] = array(
          'link' => url('node/'. $item->sid, array('absolute' => TRUE)),
          'type' => check_plain(node_get_types('name', $node)),
          'title' => $node->title,
          'user' => theme('username', $node),
          'date' => $node->changed,
          'node' => $node,
          'extra' => $extra,
          'score' => $item->score / $total,
          'snippet' => search_excerpt($keys, $node->body),
        );
      }
      return $results;
  }
}


/** Implementation of hook_menu(). **/
function cbc_menu() {
  $items = array();
  $items['cbc/tweet'] = array(
    'title' => 'Send Tweet',
    'page callback' => 'cbc_send_tweet',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 * - remove the search tabs for Power Search, Content, and Users.
 */
function cbc_menu_alter(&$items) {
  $dead_menu_items_walking = array(
    'search/user',
    'search/node',
    'search/cbc',
  );
  foreach ($dead_menu_items_walking as $dead_item) {
    unset($items[$dead_item . '/%menu_tail']);
  }
}

function cbc_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view':
      $node->content['service_links']['#access'] = FALSE;
      break;
  }

}

function _cbc_get_types() {
  static $types;
  if(empty($types)) {
    $types = array(

    );
  }
  return $types;
}

function cbc_send_tweet($nids) {
  $form = array();
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Your Twitter username.'),
  );
  $form['password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Your twitter password.'),
  );
  return $form;
}

function cbc_send_tweet_validate($form_id, &$form_state) {
  $form_values = $form_state['values'];
  $username = $form_values['username'];
  $password = $form_values['password'];
  $status = check_plain('This is an auto tweet.');

  if ($status) {
    $tweetUrl = 'http://www.twitter.com/statuses/update.xml';

    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, "$tweetUrl");
    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 2);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_POST, 1);
    curl_setopt($curl, CURLOPT_POSTFIELDS, "status=$status");
    curl_setopt($curl, CURLOPT_USERPWD, "$username:$password");

    $result = curl_exec($curl);
    $resultArray = curl_getinfo($curl);

    if ($resultArray['http_code'] == 200)
    echo 'Tweet Posted';
    else
    echo 'Could not post Tweet to Twitter right now. Try again later.';

    curl_close($curl);
  }
}


/**
 * Implementation of hook_block()
 */
function cbc_block($op = 'list', $delta = 'social_links' , $edit = array()) {
  switch ($op) {
  case 'list':
    return array(
      'social_links' => array(
        'info' => t('Social Media Icons'),
        'cache' => BLOCK_NO_CACHE,
      ),
      'footer' => array(
        'info' => t('Footer'),
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
    );

  case 'configure':
    switch ($delta) {
    case 'social_links':
      return array(
        'twitter' => array(
          '#type' => 'textfield',
          '#title' => t('Twitter link'),
          '#default_value' => variable_get('cbc_social_twitter', 'http://twitter.com'),
        ),
        'vimeo' => array(
          '#type' => 'textfield',
          '#title' => t('Vimeo link'),
          '#default_value' => variable_get('cbc_social_vimeo', 'http://vimeo.com'),
        ),
        'facebook' => array(
          '#type' => 'textfield',
          '#title' => t('Facebook link'),
          '#default_value' => variable_get('cbc_social_facebook', 'http://facebook.com'),
        ),
        'linkedin' => array(
          '#type' => 'textfield',
          '#title' => t('Linkedin Link'),
          '#default_value' => variable_get('cbc_social_linkedin', 'http://linkedin.com'),
        ),
      );
    }

  case 'save':
    variable_set('cbc_social_twitter', $edit['twitter']);
    variable_set('cbc_social_vimeo', $edit['vimeo']);
    variable_set('cbc_social_facebook', $edit['facebook']);
    variable_set('cbc_social_linkedin', $edit['linkedin']);
    break;

  case 'view':
    switch ($delta) {
    case 'social_links':
      $block = cbc_social_block();
      break;
    case 'footer':
      $block = cbc_footer_block();
      break;
    }

    return $block;
  }
}

/**
 * Render social links
 * @param
 * @return
 */
function cbc_social_block() {
  $links = cbc_get_social_links();
  return array(
    'subject' => t('Get the Latest Updates'),
    'content' => theme('links', $links),
  );
}


/**
 * Auxiliary function just to get links
 * @param $title - Wether title for each link is to be returned too
 */
function cbc_get_social_links($title = FALSE) {
  return array(
    'rss' => array(
      'title' => $title ? 'RSS' : '',
      'href' => cbc_social_get_rss(),
    ),
    'twitter' => array(
      'title' => $title ? 'Twitter' : '',
      'href' => variable_get('cbc_social_twitter', 'http://twitter.com'),
    ),
    'vimeo' => array(
      'title' => $title ? 'Vimeo' : '',
      'href' => variable_get('cbc_social_vimeo', 'http://vimeo.com'),
    ),
    'facebook' => array(
      'title' => $title ? 'Facebook' : '',
      'href' => variable_get('cbc_social_facebook', 'http://facebook.com'),
    ),
    'linkedin' => array(
      'title' => $title ? 'Linkedin' : '',
      'href' => variable_get('cbc_social_linkedin', 'http://linkedin.com'),
    ),
  );
}

/**
 * Footer blocks (with menus and text)
 */
function cbc_footer_block() {
  $links = array();

  $links[] = l('Home', '<front>');
  foreach (menu_tree_page_data('primary-links') as $item) {
    if (!$item['link']['hidden']) {
      $links[] = l($item['link']['link_title'], $item['link']['href']);
    }
  }

  $blinks[] = l('Terms & Conditions/Privacy Policy', 'terms-and-conditionsprivacy-policy');
  $blinks[] = l('Sitemap', 'sitemap');

  $social = array();

  foreach (cbc_get_social_links(TRUE) as $item) {
    $social[] = l($item['title'], $item['href']);
  }

  $output .= '<p>' . implode(' | ', $links) . '</p>';
  $output .= '<p>' . implode(' | ', $social) . '</p>';
  $output .= '<p>' . implode(' | ', $blinks) . '</p>';

  $output .=': : Citizens Budget Commission : : Two Penn Plaza, 5th Floor, New York, NY 10121 : : 212-279-2605 : :';
  return array('content' => $output);
}

/**
 * Gets/set the RSS for the current
 * @param
 * @return
 */
function cbc_social_get_rss($rss_url = NULL) {
  static $stored_rss;

  if ($rss_url) {
    $stored_rss = $rss_url;
  }
  elseif (!$stored_rss) {
    $stored_rss = variable_get('cbc_site_rss', '<front>');
  }

  return $stored_rss;
}
/**
 * Implements hook_init().
 * Fix hierarchical json not loading well for certain conditions.
 */
function cbc_init() {
  $menu = menu_get_item();
  if ($menu['href'] === 'hierarchical_select_json') {
    module_load_include('inc', 'node', 'node.pages');
  }
}

/**
 * Implements hook_preprocess_search_result().
 * change the info line at the bottom of search results.
 */
function cbc_preprocess_search_result(&$variables) {
  $info = array();
  unset($variables['info']);
  $node = node_load($variables['result']['node']->entity_id);
  if (!empty($variables['result']['type'])) {
    $variables['content_type'] = check_plain($variables['result']['type']);
  }
  if (!empty($node->field_cbc_publish_date['0']['value'])) {
    $unix_publish_date = strtotime($node->field_cbc_publish_date['0']['value']);
    $variables['cbc_publish_date'] =   format_date($unix_publish_date, 'custom', 'M d, Y');
  }

  if (isset($node->taxonomy) && !empty($node->taxonomy)) {
    foreach ($node->taxonomy as $tid => $term) {
      // Only show terms from the Topics vocabulary.
      if ($term->vid != '4') {
        unset ($node->taxonomy[$tid]);
      }
    }
    $terms = taxonomy_link('taxonomy terms', $node);
    $variables['terms'] = theme('links', $terms);
  }

}

